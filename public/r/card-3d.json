{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card-3d",
  "type": "registry:component",
  "title": "Card3D",
  "description": "Card component which gives 3d like effect on hover",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/Card3D.tsx",
      "content": "import { motion } from \"motion/react\";\nimport { MouseEvent, useRef, useState } from \"react\";\n\ntype T3DCardProps = {\n  children: React.ReactNode;\n  className?: string;\n  intensity?: number;\n  scale?: number;\n  glareEffect?: boolean;\n  shadowEffect?: boolean;\n};\n\nexport const Card3D = ({\n  children,\n  className = \"\",\n  intensity = 15, // Tilt intensity in degrees\n  scale = 1.05, // Scale on hover\n  glareEffect = true,\n  shadowEffect = true,\n}: T3DCardProps) => {\n  const [rotateX, setRotateX] = useState(0);\n  const [rotateY, setRotateY] = useState(0);\n  const [isHovered, setIsHovered] = useState(false);\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseMove = (e: any) => {\n    if (!cardRef.current) return;\n\n    const card = cardRef.current;\n    const rect = card.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n\n    const mouseX = e.clientX - centerX;\n    const mouseY = e.clientY - centerY;\n\n    const rotateXValue = (mouseY / (rect.height / 2)) * -intensity;\n    const rotateYValue = (mouseX / (rect.width / 2)) * intensity;\n\n    setRotateX(rotateXValue);\n    setRotateY(rotateYValue);\n  };\n\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n    setRotateX(0);\n    setRotateY(0);\n  };\n\n  return (\n    <motion.div\n      ref={cardRef}\n      className={`relative cursor-pointer select-none ${className}`}\n      style={{\n        perspective: \"1000px\",\n        transformStyle: \"preserve-3d\",\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      animate={{\n        scale: isHovered ? scale : 1,\n      }}\n      transition={{\n        duration: 0.2,\n        ease: \"easeOut\",\n      }}\n    >\n      <motion.div\n        className=\"relative w-full h-full rounded-xl overflow-hidden\"\n        animate={{\n          rotateX: rotateX,\n          rotateY: rotateY,\n        }}\n        transition={{\n          duration: 0.1,\n          ease: \"easeOut\",\n        }}\n        style={{\n          transformStyle: \"preserve-3d\",\n          boxShadow: shadowEffect\n            ? isHovered\n              ? `0 20px 40px rgba(0,0,0,0.15), 0 15px 12px rgba(0,0,0,0.1)`\n              : `0 10px 20px rgba(0,0,0,0.1), 0 6px 6px rgba(0,0,0,0.05)`\n            : \"none\",\n        }}\n      >\n        {children}\n\n        {/* Glare effect overlay */}\n        {glareEffect && (\n          <motion.div\n            className=\"absolute inset-0 pointer-events-none rounded-xl\"\n            style={{\n              background: `linear-gradient(${\n                Math.atan2(rotateY, rotateX) * (180 / Math.PI) + 90\n              }deg, rgba(255,255,255,0) 0%, rgba(255,255,255,${\n                isHovered ? 0.1 : 0\n              }) 50%, rgba(255,255,255,0) 100%)`,\n            }}\n            animate={{\n              opacity: isHovered ? 1 : 0,\n            }}\n            transition={{\n              duration: 0.2,\n            }}\n          />\n        )}\n      </motion.div>\n    </motion.div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/spartan-ui/Card3D.tsx"
    }
  ]
}