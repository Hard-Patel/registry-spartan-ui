{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progressive-hover-card",
  "type": "registry:component",
  "title": "Progressive Hover Card",
  "description": "Card with progresive hover effect with smooth animation",
  "dependencies": [],
  "files": [
    {
      "path": "registry/new-york/ui/ProgressiveHoverCard.tsx",
      "content": "import { useRef, useState } from \"react\";\n\nexport type ProgressiveHoverCardProps = {\n  children: React.ReactNode;\n  className?: string;\n  hoverColor?: string;\n};\n\nexport const ProgressiveHoverCard = ({\n  children,\n  className = \"\",\n  hoverColor = \"bg-blue-500\",\n}: ProgressiveHoverCardProps) => {\n  const [hoverState, setHoverState] = useState({\n    isHovered: false,\n    x: 0,\n    y: 0,\n    size: 0,\n  });\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseEnter = (e: any) => {\n    const card = cardRef.current;\n    if (!card) return;\n\n    const rect = card.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Calculate the maximum distance to cover entire component\n    const maxX = Math.max(x, rect.width - x);\n    const maxY = Math.max(y, rect.height - y);\n    const maxSize = Math.sqrt(maxX * maxX + maxY * maxY) * 2;\n\n    setHoverState({\n      isHovered: true,\n      x,\n      y,\n      size: maxSize,\n    });\n  };\n\n  const handleMouseLeave = () => {\n    setHoverState((prev) => ({ ...prev, isHovered: false }));\n  };\n\n  return (\n    <div\n      ref={cardRef}\n      className={`relative overflow-hidden cursor-pointer ${className}`}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {/* Progressive hover background */}\n      <div\n        className={`absolute top-0 left-0 rounded-full ${hoverColor} transition-all duration-500 ease-out`}\n        style={{\n          left: hoverState.x - hoverState.size / 2,\n          top: hoverState.y - hoverState.size / 2,\n          width: hoverState.size,\n          height: hoverState.size,\n          transform: hoverState.isHovered ? \"scale(1)\" : \"scale(0)\",\n          opacity: hoverState.isHovered ? 1 : 0,\n        }}\n      />\n\n      {/* Content */}\n      <div className=\"relative z-10\">{children}</div>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/spartan-ui/ProgressiveHoverCard.tsx"
    }
  ]
}