{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "user-avatars",
  "type": "registry:component",
  "title": "User Avatars",
  "description": "User avatars with scale and reveal animation with name visibility on hover",
  "dependencies": [
    "motion",
    "tailwind-merge",
    "clsx"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/UserAvatars.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { useState, KeyboardEvent } from \"react\";\n\ninterface User {\n  id: string | number;\n  name?: string;\n  image: string;\n}\n\ninterface UserAvatarsProps {\n  /** List of users with id, name, and image */\n  users: User[];\n  /** Avatar size in px (default: 56) */\n  size?: number | string;\n  /** Extra classNames for container */\n  className?: string;\n  /** Max number of visible avatars before showing +X bubble (default: 7) */\n  maxVisible?: number;\n  /** Overlap percentage between avatars (default: 60) */\n  overlap?: number;\n  /** Hover scale factor (default: 1.2) */\n  focusScale?: number;\n  /** Display avatars from right to left (default: false) */\n  isRightToLeft?: boolean;\n  /** Only overlap avatars, no shifting on hover (default: false) */\n  isOverlapOnly?: boolean;\n  /** Tooltip placement (default: \"bottom\") */\n  tooltipPlacement?: \"top\" | \"bottom\";\n}\n\nexport const UserAvatars = ({\n  users,\n  size = 56,\n  className,\n  maxVisible = 7,\n  isRightToLeft = false,\n  isOverlapOnly = false,\n  overlap = 60,\n  focusScale = 1.2,\n  tooltipPlacement = \"bottom\",\n}: UserAvatarsProps) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  const slicedUsers = users.slice(\n    0,\n    Math.min(maxVisible + 1, users.length + 1)\n  );\n  const exceedMaxLength = users.length > maxVisible;\n\n  const handleKeyEnter = (e: KeyboardEvent<HTMLDivElement>, index: number) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      setHoveredIndex(index);\n    }\n  };\n\n  return (\n    <div className={cn(\"flex items-center relative\", className)}>\n      {slicedUsers.map((user, index) => {\n        const isHoveredOne = hoveredIndex === index;\n        const isLengthBubble = exceedMaxLength && maxVisible === index;\n\n        const diff = 1 - overlap / 100;\n        const zIndex =\n          isHoveredOne && isOverlapOnly\n            ? slicedUsers.length\n            : isRightToLeft\n            ? slicedUsers.length - index\n            : index;\n\n        const shouldScale =\n          isHoveredOne &&\n          (!exceedMaxLength || slicedUsers.length - 1 !== index);\n\n        const shouldShift =\n          hoveredIndex !== null &&\n          (isRightToLeft ? index < hoveredIndex : index > hoveredIndex) &&\n          !isOverlapOnly;\n\n        const baseGap = Number(size) * (overlap / 100);\n        const neededGap = (Number(size) * (1 + focusScale)) / 2;\n        const shift = Math.max(0, neededGap - baseGap);\n\n        return (\n          <motion.div\n            key={user.id}\n            role=\"img\"\n            aria-label={user.name || \"User avatar\"}\n            className=\"relative cursor-pointer outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary rounded-full\"\n            style={{\n              width: size,\n              height: size,\n              zIndex,\n              marginLeft: index === 0 ? 0 : -Number(size) * diff,\n            }}\n            tabIndex={0}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n            onFocus={() => setHoveredIndex(index)}\n            onBlur={() => setHoveredIndex(null)}\n            onKeyDown={(e) => handleKeyEnter(e, index)}\n            animate={{\n              scale: shouldScale ? focusScale : 1,\n              x: shouldShift ? shift * (isRightToLeft ? -1 : 1) : 0,\n            }}\n            transition={{ type: \"spring\", stiffness: 200, damping: 20 }}\n          >\n            {/* Avatar bubble */}\n            <div className=\"w-full h-full rounded-full overflow-hidden border border-white shadow-md\">\n              {isLengthBubble ? (\n                <div className=\"flex h-full w-full items-center justify-center bg-background text-xs font-medium\">\n                  +{users.length - maxVisible}\n                </div>\n              ) : (\n                <img\n                  src={user.image}\n                  alt={user.name || \"User\"}\n                  className=\"w-full h-full object-cover\"\n                />\n              )}\n            </div>\n\n            {/* Tooltip */}\n            <AnimatePresence>\n              {shouldScale && user.name && (\n                <motion.div\n                  role=\"tooltip\"\n                  initial={{\n                    opacity: 0,\n                    y: tooltipPlacement === \"bottom\" ? 8 : -8,\n                  }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{\n                    opacity: 0,\n                    y: tooltipPlacement === \"bottom\" ? 8 : -8,\n                  }}\n                  transition={{ duration: 0.18 }}\n                  // IMPORTANT: don't put -translate-x on this element\n                  className={cn(\n                    \"absolute left-1/2 z-50\",\n                    tooltipPlacement === \"bottom\"\n                      ? \"top-full mt-2\"\n                      : \"bottom-full mb-2\"\n                  )}\n                >\n                  {/* Inner wrapper applies the translateX via CSS (not overridden by Framer) */}\n                  <div className=\"transform -translate-x-1/2 whitespace-nowrap rounded-md bg-black text-white text-xs px-2 py-1 shadow-lg\">\n                    {user.name}\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/spartan-ui/UserAvatars.tsx"
    },
    {
      "path": "registry/new-york/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": "lib/utils.ts"
    }
  ]
}