{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "focused-text",
  "type": "registry:component",
  "title": "Focused Text",
  "description": "Focus effect on hover for the text or children component from the wrapper",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/FocusedText.tsx",
      "content": "import { motion } from \"motion/react\";\nimport { useState } from \"react\";\n\ntype TextAnimationProps = {\n  children: React.ReactNode;\n  className?: string;\n  textColor?: string;\n  hoverTextColor?: string;\n  fontSize?: string;\n  fontWeight?: string;\n  duration?: number;\n  direction?: \"up\" | \"down\" | \"left\" | \"right\";\n  ease?: number[];\n};\n\nexport const FocusedText = ({\n  children,\n  className = \"\",\n  textColor = \"text-white\",\n  hoverTextColor = \"\",\n  fontSize = \"text-base\",\n  fontWeight = \"font-medium\",\n  duration = 0.3,\n  direction = \"up\", // 'up', 'down', 'left', 'right'\n  ease = [0.25, 0.1, 0.25, 1],\n}: TextAnimationProps) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Direction configurations\n  const directions = {\n    up: {\n      initial: { y: \"-100%\" },\n      exit: { y: \"100%\" },\n    },\n    down: {\n      initial: { y: \"100%\" },\n      exit: { y: \"-100%\" },\n    },\n    left: {\n      initial: { x: \"-100%\" },\n      exit: { x: \"100%\" },\n    },\n    right: {\n      initial: { x: \"100%\" },\n      exit: { x: \"-100%\" },\n    },\n  };\n\n  const currentDirection = directions[direction] || directions.up;\n  const finalTextColor = hoverTextColor || textColor;\n\n  return (\n    <div\n      className={`relative inline-block overflow-hidden cursor-pointer ${className}`}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      <div className=\"relative\">\n        {/* Original text */}\n        <motion.span\n          className={`inline-block ${fontSize} ${fontWeight} ${textColor}`}\n          initial={{ y: 0, x: 0 }}\n          animate={\n            isHovered\n              ? {\n                  y:\n                    direction === \"up\"\n                      ? \"100%\"\n                      : direction === \"down\"\n                      ? \"-100%\"\n                      : 0,\n                  x:\n                    direction === \"left\"\n                      ? \"100%\"\n                      : direction === \"right\"\n                      ? \"-100%\"\n                      : 0,\n                  opacity: 0.8,\n                }\n              : { y: 0, x: 0, opacity: 1 }\n          }\n          transition={{ duration, ease }}\n        >\n          {children}\n        </motion.span>\n\n        {/* Sliding text */}\n        <motion.span\n          className={`absolute top-0 left-0 inline-block ${fontSize} ${fontWeight} ${finalTextColor}`}\n          initial={currentDirection.initial}\n          animate={\n            isHovered ? { y: 0, x: 0, opacity: 1 } : currentDirection.initial\n          }\n          transition={{ duration, ease }}\n        >\n          {children}\n        </motion.span>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/spartan-ui/FocusedText.tsx"
    }
  ]
}